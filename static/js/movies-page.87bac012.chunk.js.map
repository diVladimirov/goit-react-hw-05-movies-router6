{"version":3,"file":"static/js/movies-page.87bac012.chunk.js","mappings":"yNAEaA,EAAcC,EAAAA,GAAAA,GAAH,kEAKXC,EAAaD,EAAAA,GAAAA,GAAH,yR,mICLVE,EAAaF,EAAAA,GAAAA,KAAH,oFAMVG,EAAcH,EAAAA,GAAAA,MAAH,uNAaXI,EAAeJ,EAAAA,GAAAA,OAAH,8lB,0LCwBzB,EAxCe,SAAC,GAA8B,IAA5BK,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iCACE,UAAC,KAAD,CAAYH,SAAUA,EAAtB,WACE,SAAC,KAAD,CACEI,KAAK,OACLC,YAAY,yBACZC,KAAK,iBAEP,SAAC,KAAD,CAAcF,KAAK,SAAnB,+BAEF,SAAC,IAAD,UACGH,GACCA,EAAWM,KACT,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,GAAIC,EAAvB,EAAuBA,cAAeC,EAAtC,EAAsCA,MAAOC,EAA7C,EAA6CA,YAA7C,OACE,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMb,GAA1C,WACE,uBAAIM,IACHE,GACC,gBACEM,IAAG,0CAAqCN,GACxCO,IAAKN,KAGP,gBACEK,IAAG,0CAAqCJ,GACxCK,IAAKN,QAXJF,YCuBvB,EAvCmB,WACjB,OAAmCS,EAAAA,EAAAA,UAAS,IAA5C,eAAOjB,EAAP,KAAmBkB,EAAnB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA2BH,EAAAA,EAAAA,UAAS,IAApC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,gBAErCC,EAAAA,EAAAA,YAAU,WAAM,wCAId,2FACER,GAAW,GADb,mBAGuBS,EAAAA,EAAAA,IAAqBH,GAH5C,OAGUI,EAHV,OAIIZ,EAAaY,EAAKC,SAJtB,gDAMIT,EAAU,KAAMU,SANpB,yBAQIZ,GAAW,GARf,6EAJc,sBACM,OAAhBM,GADU,mCAedO,KACC,CAACP,IAQJ,OACE,gCACGP,IAAW,SAACe,EAAA,EAAD,KACVb,IAAS,SAAC,EAAD,CAAQtB,SATF,SAAAoC,GACnBA,EAAMC,iBACNX,EAAgB,CAAEC,YAAaS,EAAME,OAAOC,SAASZ,YAAYa,QACjEJ,EAAME,OAAOC,SAASZ,YAAYa,MAAQ,IAMGvC,WAAYA,S,0JCtCvDwC,EAAS,4CACTC,EAAW,+BAEJC,EAAiB,mCAAG,WAAMlC,GAAN,uFACRmC,IAAAA,IAAA,cACrBF,EADqB,kBACHjC,GADG,OACEgC,EADF,wCADQ,cACzBI,EADyB,yBAGxBA,EAASd,MAHe,2CAAH,sDAMjBe,EAAmB,mCAAG,oGACVF,IAAAA,IAAA,UAAaF,EAAb,8BAA2CD,IADjC,cAC3BI,EAD2B,yBAE1BA,EAASd,MAFiB,2CAAH,qDAKnBD,EAAoB,mCAAG,WAAMiB,GAAN,uFACXH,IAAAA,IAAA,UAClBF,EADkB,wBACMD,EADN,kBACsBM,IAFX,cAC5BF,EAD4B,yBAI3BA,EAASd,MAJkB,2CAAH","sources":["components/Home/Home.styled.js","components/Movies/Movies.styled.js","components/Movies/Movies.js","pages/MoviesPage.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const TitleStyled = styled.h1`\n  text-align: center;\n  color: #3807fd;\n`;\n\nexport const ListStyled = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const InputStyled = styled.input`\n  display: inline-block;\n  width: 200px;\n  font: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  padding: 8px 16px;\n  ::placeholder {\n    font: inherit;\n    font-size: 16px;\n  }\n`;\n\nexport const ButtonStyled = styled.button`\n  padding: 8px 16px;\n  border-radius: 2px;\n  background-color: #10a446;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: inline-block;\n  color: #f2e310;\n  border: 0;\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  min-width: 180px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  :hover,\n  :focus {\n    background-color: #303f9f;\n  }\n`;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { FormStyled, InputStyled, ButtonStyled } from './Movies.styled';\nimport { ListStyled } from 'components/Home/Home.styled';\n\nconst Movies = ({ onSubmit, moviesList }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <FormStyled onSubmit={onSubmit}>\n        <InputStyled\n          type=\"text\"\n          placeholder=\"Enter movie to find...\"\n          name=\"movieToFind\"\n        ></InputStyled>\n        <ButtonStyled type=\"submit\">Search Movies</ButtonStyled>\n      </FormStyled>\n      <ListStyled>\n        {moviesList &&\n          moviesList.map(\n            ({ original_title, id, backdrop_path, title, poster_path }) => (\n              <li key={id}>\n                <Link to={`/movies/${id}`} state={{ from: location }}>\n                  <p>{original_title}</p>\n                  {backdrop_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500/${backdrop_path}`}\n                      alt={title}\n                    />\n                  ) : (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                      alt={title}\n                    />\n                  )}\n                </Link>\n              </li>\n            )\n          )}\n      </ListStyled>\n    </>\n  );\n};\n\nexport default Movies;\n","import { useState, useEffect } from 'react';\nimport { fetchMoviesFromQuery } from 'services/api';\nimport { useSearchParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport Movies from 'components/Movies/Movies';\n\nconst MoviesPage = () => {\n  const [moviesList, setMovieList] = useState([]);\n  const [loading, setloading] = useState(false);\n  const [error, setErrror] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieToFind = searchParams.get('movieToFind');\n\n  useEffect(() => {\n    if (movieToFind === null) {\n      return;\n    }\n    async function fetchMovies() {\n      setloading(true);\n      try {\n        const data = await fetchMoviesFromQuery(movieToFind);\n        setMovieList(data.results);\n      } catch (error) {\n        setErrror(error.message);\n      } finally {\n        setloading(false);\n      }\n    }\n    fetchMovies();\n  }, [movieToFind]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSearchParams({ movieToFind: event.target.elements.movieToFind.value });\n    event.target.elements.movieToFind.value = '';\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      {!error && <Movies onSubmit={handleSubmit} moviesList={moviesList} />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst APIkey = '?api_key=d0d2393ff57617bcd19c89c64bc8a08d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchFilmsDetails = async id => {\n  const response = await axios.get(`\n  ${BASE_URL}/movie/${id}${APIkey}&append_to_response=credits,reviews`);\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day${APIkey}`);\n  return response.data;\n};\n\nexport const fetchMoviesFromQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie${APIkey}&query=${query}`\n  );\n  return response.data;\n};\n"],"names":["TitleStyled","styled","ListStyled","FormStyled","InputStyled","ButtonStyled","onSubmit","moviesList","location","useLocation","type","placeholder","name","map","original_title","id","backdrop_path","title","poster_path","to","state","from","src","alt","useState","setMovieList","loading","setloading","error","setErrror","useSearchParams","searchParams","setSearchParams","movieToFind","get","useEffect","fetchMoviesFromQuery","data","results","message","fetchMovies","Loader","event","preventDefault","target","elements","value","APIkey","BASE_URL","fetchFilmsDetails","axios","response","fetchTrendingMovies","query"],"sourceRoot":""}